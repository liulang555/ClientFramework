---you can replace this with your clock function
local clock = os.clock

local timers = {}
local function insert_timer(sec, fn)
    local expiretime = clock() + sec
    local pos = 1
    for i, v in ipairs(timers) do
        if v.expiretime > expiretime then
            break
        end
        pos = i + 1
    end
    local context = {expiretime = expiretime, fn = fn}
    table.insert(timers, pos, context)
    return context
end

local co_pool = setmetatable({}, {__mode = "kv"})

local function coresume(co, ...)
    local ok, err = coroutine.resume(co, ...)
    if not ok then
        error(debug.traceback(co, err))
    end
    return ok, err
end

local function routine(fn)
    local co = coroutine.running()
    while true do
        fn()
        co_pool[#co_pool + 1] = co
        fn = coroutine.yield()
    end
end

Timer = {}

function Timer.Async(func)
    local co = table.remove(co_pool)
    if not co then
        co = coroutine.create(routine)
    end
    local _, res = coresume(co, func)
    if res then
        return res
    end
    return co
end

---@param seconds integer @duration in seconds，decimal part means millseconds
---@param func function @ timeout callback
function Timer.Timeout(seconds, func)
    return insert_timer(seconds, func)
end

---coroutine style
---@param seconds integer @duration in seconds，decimal part means millseconds
function Timer.Sleep(seconds)
    local co = coroutine.running()
    insert_timer(
        seconds,
        function()
            coroutine.resume(co)
        end
    )
    return coroutine.yield()
end

function Timer.Remove(timer)
    timer.remove = true
end

function Timer.Update()
    while #timers > 0 do
        local timerItem = timers[1]
        if timerItem.expiretime <= clock() then
            table.remove(timers, 1)
            if not timerItem.remove then
                local ok, err = xpcall(timerItem.fn, debug.traceback)
                if not ok then
                    Log.Debug("timer error:", err)
                end
            end
        else
            break
        end
    end
end

return Timer
